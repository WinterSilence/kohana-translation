<?php defined('SYSPATH') OR die('No direct access allowed.');/** * Yandex auto translate text. *  * @package   Translation * @category  Base * @author    WinterSilence * @copyright © 2013-2014 handy-soft.ru * @license   http://kohanaframework.org/license * @link      http://api.yandex.ru/translate/ Yandex translate service * @link      http://legal.yandex.ru/translate_api/ Terms of use API */abstract class Yandex_Translation {	/**	 * Yandex translate URI	 */	const YA_URI = 'https://translate.yandex.net/api/v1.5/tr.json/';	/**	 * @var  array  API error code => human readable name	 */	protected static $_errors = array(		401 => 'API key invalid',		402 => 'API key blocked',		403 => 'Exceeded the daily limit on the number of requests',		404 => 'Exceeded the daily limit on the amount of translated text',		413 => 'Exceeds the maximum size of the text',		422 => 'The text can not be translated',		501 => 'Set direction of translation is not supported',	);	/**	 * @var  string  Yandex [API-key](http://api.yandex.ru/key/form.xml?service=trnsl)	 */	public static $key;	/**	 * Path to certificate `*.crt` file. Certificate chain in the format pem.	 * 	 * [!!] You can then use a command simiar to this to translate your 	 * apache certificate into one that curl likes.	 * `$ openssl x509 -in server.crt -out outcert.pem -text`	 * 	 * @var  string	 */	public static $certificate;	/**	 * @var  string  Target language. If is empty, used [I18n::$lang] for detect.	 */	public static $to;	/**	 * @var  string  Source language. If is empty, used Yandex auto detect.	 */	public static $from;	/**	 * @var  string  Regex pattern, uses for find variables in text.	 */	public static $var_tag = '~:(\w+)~';	/**	 * Request to Yandex API	 * 	 * @param   string  $uri   URI for detect method	 * @param   array   $data  Request POST params	 * @return  array	 * @throw   Translation_Exception	 * @uses    Cache::instance	 * @uses    Request::factory	 */	protected static function _api_request($uri, array $data = array())	{		// Check API key and certificate		if (empty(self::$key))		{			throw new Translation_Exception('API key is empty');		}		elseif (empty(self::$certificate))		{			throw new Translation_Exception('Path to API certificate is empty');		}		$data['key'] = self::$key;		// Cache requests, uses [Cache] module (default group)		if (Kohana::$caching AND class_exists('Cache', FALSE))		{			try			{				$client_params = array('cache' => Cache::instance());			}			catch (Kohana_Exception $e)			{				$client_params = array();			}		}				// Create and execute request to API		$request = Request::factory(self::YA_URI.$uri); // , $client_params		$request			->client()			->options(array(				CURLOPT_RETURNTRANSFER => TRUE, 				CURLOPT_SSL_VERIFYPEER => TRUE, 				CURLOPT_CAINFO         => self::$certificate,			));		$result = $request->method(Request::POST)			->post($data)			->execute()			->body();		$result = json_decode($result, TRUE);				// Check request API errors		if (Arr::get($result, 'code', 200) !== 200)		{			throw new Translation_Exception(				'API method :uri: :code', 				array(':uri'  => $uri, ':code' => self::$_errors[$result['code']])			);		}		unset($result['code']);		return $result;	}	/**	 * Returns a list of language supported by the service. If `$ui` specified, then 	 * the service response will be added to the list of language codes and their 	 * corresponding names of languages​​: en (English), ru (Russian), tr (Turkish), uk (Ukrainian).	 * 	 * @param   string|NULL  $ui  User interface language	 * @return  array	 * @throw   Translation_Exception	 */	protected static function _langs($ui = NULL, $languages​​ =  array('en', 'ru', 'tr', 'uk'))	{		// Check ui value		if ($ui !== NULL AND ! in_array($ui, $languages))		{			throw new Translation_Exception(				'Language :ui not supported', 				array(':ui' => $ui)			);		}		return self::_api_request('getLangs', $ui ? array('ui' => $ui) : array());	}	/**	 * Transforms the [ROT13](http://wikipedia.org/wiki/ROT13) over row for save variables tags at translate.	 * 	 * @param   mixed  $text	 * @return  mixed	 */	protected static function _rot13($text)	{		return preg_replace_callback(			self::$var_tag, 			create_function('$match', 'return ":".str_rot13($match[1]);'), 			$text		);	}	/**	 * Auto translates text.	 * 	 * @param   string|array  $text	 * @param   string        $to	 * @param   string        $from	 * @param   bool          $html	 * @return  string|array	 * @uses    I18n::lang	 */	public static function translate($text, $to = NULL, $from = NULL, $html = FALSE)	{		if (empty($text))		{			return $text;		}		$text = self::_rot13($text);				$result = self::_api_request(			'translate', 			array(				'lang'    => ($from ? $from.'-' : '').($to ? $to : I18n::lang()),				'text'    => is_array($text) ? implode('#b#r#', array_values($text)) : $text,				'format'  => $html ? 'html' : 'plain',				'options' => (empty($from) OR empty($to)) ? 1 : 0,			)		);		$result = implode((array) Arr::get($result, 'text'));		$result = self::_rot13($result);		if ( ! is_array($text))		{			return $result;		}		elseif ( ! empty($result))		{			return array_combine(array_keys($text), explode('#b#r#', $result));		}	}	/**	 * Specifies the language in which is written the specified text.	 * 	 * @param   mixed  $text	 * @param   bool   $html	 * @return  string	 * @uses    Arr::get	 */	public static function detect($text, $html = FALSE)	{		$result = self::_api_request(			'detect', 			array(				'text' => is_array($text) ? implode($text) : $text, 				'format' => $html ? 'html' : 'plain',			)		);		return Arr::get($result, 'lang');	}	/**	 * Returns a list of supported translation directions.	 * 	 * @return  array	 * @uses    Arr::get	 */	public static function direction()	{		return (array) Arr::get(Translation::_langs(), 'dirs');	}	/**	 * Returns a list of language supported by the service. 	 * 	 * @param   string  $ui  User interface language	 * @return  array	 * @uses    I18n::lang	 * @uses    Arr::get	 */	public static function langs($ui = NULL)	{		$ui = empty($ui) ? I18n::lang() : $ui;		return (array) Arr::get(Translation::_langs($ui), 'langs');	}}